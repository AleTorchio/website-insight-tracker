#!/usr/bin/env python3
"""
üî≠ OBSERVATORY BOT - VERSIONE REPLIT INSTANT
Copia questo file in Replit e clicca Run!
Zero configurazione richiesta.
"""

import os
import sys
import time
import json
from datetime import datetime, timedelta

print("üöÄ Installazione automatica in corso...")
print("=" * 50)

# Auto-installa dipendenze
packages = ['ccxt', 'pandas']
for package in packages:
    try:
        __import__(package)
        print(f"‚úÖ {package} gi√† installato")
    except ImportError:
        print(f"üì¶ Installo {package}...")
        os.system(f"{sys.executable} -m pip install {package} --quiet")
        print(f"‚úÖ {package} installato!")

# Ora importa
import ccxt
import pandas as pd

# Crea directory se non esistono
os.makedirs('data', exist_ok=True)
os.makedirs('logs', exist_ok=True)

print("\n‚úÖ Setup completato! Avvio bot...\n")
time.sleep(2)

# ==================== BOT CONFIGURATION ====================
class BotConfig:
    """Configurazione semplificata"""
    # Exchange (no API keys = solo dati pubblici)
    EXCHANGES = ['binance', 'kucoin', 'kraken', 'mexc']
    
    # Coppie principali
    PAIRS = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'SOL/USDT', 'MATIC/USDT']
    
    # Parametri
    CHECK_INTERVAL = 60  # secondi
    MIN_PROFIT_THRESHOLD = 0.3  # 0.3% minimo per segnalare
    
    # Stile output
    EMOJI = {
        'rocket': 'üöÄ',
        'target': 'üéØ', 
        'money': 'üí∞',
        'chart': 'üìä',
        'clock': '‚è∞',
        'fire': 'üî•',
        'warning': '‚ö†Ô∏è',
        'check': '‚úÖ'
    }

# ==================== SIMPLE BOT ====================
class SimpleObservatoryBot:
    def __init__(self):
        self.config = BotConfig()
        self.exchanges = {}
        self.opportunities_count = 0
        self.total_profit_found = 0
        self.start_time = datetime.now()
        self.price_history = []
        self.best_opportunity = None
        
        print(f"{self.config.EMOJI['rocket']} OBSERVATORY BOT v2.0")
        print("=" * 50)
        print("Il tuo assistente per trovare opportunit√† crypto 24/7")
        print("=" * 50)
        
        self._initialize_exchanges()
        
    def _initialize_exchanges(self):
        """Connetti agli exchange"""
        print(f"\n{self.config.EMOJI['chart']} Connessione agli exchange...")
        
        for exchange_id in self.config.EXCHANGES:
            try:
                exchange = getattr(ccxt, exchange_id)({
                    'enableRateLimit': True,
                    'timeout': 10000
                })
                # Test connessione
                exchange.load_markets()
                self.exchanges[exchange_id] = exchange
                print(f"{self.config.EMOJI['check']} {exchange_id.upper()} connesso")
            except Exception as e:
                print(f"{self.config.EMOJI['warning']} {exchange_id.upper()} non disponibile")
        
        print(f"\n{self.config.EMOJI['fire']} {len(self.exchanges)} exchange pronti!")
        
    def get_prices(self):
        """Ottieni prezzi da tutti gli exchange"""
        all_prices = {}
        
        for symbol in self.config.PAIRS:
            all_prices[symbol] = {}
            
            for name, exchange in self.exchanges.items():
                try:
                    ticker = exchange.fetch_ticker(symbol)
                    all_prices[symbol][name] = {
                        'bid': ticker['bid'],
                        'ask': ticker['ask'],
                        'last': ticker['last'],
                        'volume': ticker['quoteVolume']
                    }
                except:
                    # Ignora errori temporanei
                    pass
                    
        return all_prices
    
    def find_arbitrage_opportunities(self, prices):
        """Trova opportunit√† di arbitraggio"""
        opportunities = []
        
        for symbol, exchange_prices in prices.items():
            exchanges = list(exchange_prices.keys())
            
            # Confronta ogni coppia di exchange
            for i in range(len(exchanges)):
                for j in range(i + 1, len(exchanges)):
                    ex1, ex2 = exchanges[i], exchanges[j]
                    
                    if ex1 in exchange_prices and ex2 in exchange_prices:
                        p1 = exchange_prices[ex1]
                        p2 = exchange_prices[ex2]
                        
                        # Scenario 1: Compra su ex1, vendi su ex2
                        if p1['ask'] and p2['bid']:
                            profit1 = ((p2['bid'] - p1['ask']) / p1['ask']) * 100
                            
                            if profit1 > self.config.MIN_PROFIT_THRESHOLD:
                                opportunities.append({
                                    'symbol': symbol,
                                    'buy_exchange': ex1,
                                    'sell_exchange': ex2,
                                    'buy_price': p1['ask'],
                                    'sell_price': p2['bid'],
                                    'profit_pct': profit1,
                                    'volume': min(p1.get('volume', 0), p2.get('volume', 0))
                                })
                        
                        # Scenario 2: Compra su ex2, vendi su ex1
                        if p2['ask'] and p1['bid']:
                            profit2 = ((p1['bid'] - p2['ask']) / p2['ask']) * 100
                            
                            if profit2 > self.config.MIN_PROFIT_THRESHOLD:
                                opportunities.append({
                                    'symbol': symbol,
                                    'buy_exchange': ex2,
                                    'sell_exchange': ex1,
                                    'buy_price': p2['ask'],
                                    'sell_price': p1['bid'],
                                    'profit_pct': profit2,
                                    'volume': min(p1.get('volume', 0), p2.get('volume', 0))
                                })
        
        return sorted(opportunities, key=lambda x: x['profit_pct'], reverse=True)
    
    def display_opportunity(self, opp):
        """Mostra opportunit√† in modo chiaro"""
        profit_emoji = self.config.EMOJI['fire'] if opp['profit_pct'] > 0.5 else self.config.EMOJI['target']
        
        print(f"\n{profit_emoji} OPPORTUNIT√Ä TROVATA!")
        print(f"   Coppia: {opp['symbol']}")
        print(f"   Compra su: {opp['buy_exchange'].upper()} @ ${opp['buy_price']:,.2f}")
        print(f"   Vendi su: {opp['sell_exchange'].upper()} @ ${opp['sell_price']:,.2f}")
        print(f"   Profitto: {opp['profit_pct']:.3f}%")
        print(f"   Volume disponibile: ${opp['volume']:,.0f}")
        
        # Calcola profitto teorico
        trade_size = min(1000, opp['volume'] * 0.01)  # Max $1000 o 1% del volume
        theoretical_profit = trade_size * opp['profit_pct'] / 100
        print(f"   {self.config.EMOJI['money']} Profitto su ${trade_size:.0f}: ${theoretical_profit:.2f}")
    
    def save_data(self, opportunities, prices):
        """Salva dati per analisi"""
        timestamp = datetime.now()
        
        # Salva opportunit√†
        if opportunities:
            df = pd.DataFrame(opportunities)
            df['timestamp'] = timestamp
            df.to_csv('data/opportunities.csv', mode='a', 
                     header=not os.path.exists('data/opportunities.csv'), 
                     index=False)
        
        # Salva snapshot prezzi
        price_data = []
        for symbol, exchanges in prices.items():
            for exchange, data in exchanges.items():
                if data.get('last'):
                    price_data.append({
                        'timestamp': timestamp,
                        'symbol': symbol,
                        'exchange': exchange,
                        'price': data['last'],
                        'bid': data.get('bid'),
                        'ask': data.get('ask'),
                        'volume': data.get('volume', 0)
                    })
        
        if price_data:
            self.price_history.extend(price_data)
            # Mantieni solo ultimi 1000 record in memoria
            if len(self.price_history) > 1000:
                self.price_history = self.price_history[-1000:]
    
    def show_statistics(self):
        """Mostra statistiche"""
        runtime = datetime.now() - self.start_time
        hours = runtime.total_seconds() / 3600
        
        print(f"\n{self.config.EMOJI['chart']} STATISTICHE")
        print("=" * 50)
        print(f"Runtime: {runtime}")
        print(f"Opportunit√† trovate: {self.opportunities_count}")
        print(f"Profitto medio: {self.total_profit_found / max(1, self.opportunities_count):.3f}%")
        print(f"Opportunit√†/ora: {self.opportunities_count / max(1, hours):.1f}")
        
        if self.best_opportunity:
            print(f"\n{self.config.EMOJI['fire']} Migliore opportunit√† finora:")
            print(f"   {self.best_opportunity['symbol']}: {self.best_opportunity['profit_pct']:.3f}%")
            print(f"   {self.best_opportunity['buy_exchange']} ‚Üí {self.best_opportunity['sell_exchange']}")
    
    def create_mini_dashboard(self):
        """Crea dashboard HTML semplice"""
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Observatory Bot Dashboard</title>
            <meta http-equiv="refresh" content="60">
            <style>
                body {{ font-family: Arial; background: #1a1a1a; color: #fff; padding: 20px; }}
                h1 {{ text-align: center; color: #4CAF50; }}
                .stats {{ display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; margin: 20px 0; }}
                .stat {{ background: #2a2a2a; padding: 20px; border-radius: 10px; text-align: center; }}
                .value {{ font-size: 2em; color: #4CAF50; margin: 10px 0; }}
                table {{ width: 100%; border-collapse: collapse; margin-top: 20px; }}
                th, td {{ padding: 10px; text-align: left; border-bottom: 1px solid #444; }}
                .profit {{ color: #4CAF50; font-weight: bold; }}
            </style>
        </head>
        <body>
            <h1>üî≠ Observatory Bot Dashboard</h1>
            <div class="stats">
                <div class="stat">
                    <div>Uptime</div>
                    <div class="value">{(datetime.now() - self.start_time).days}d {(datetime.now() - self.start_time).seconds//3600}h</div>
                </div>
                <div class="stat">
                    <div>Opportunit√†</div>
                    <div class="value">{self.opportunities_count}</div>
                </div>
                <div class="stat">
                    <div>Profitto Medio</div>
                    <div class="value">{self.total_profit_found / max(1, self.opportunities_count):.2f}%</div>
                </div>
            </div>
            <p style="text-align: center;">Ultimo aggiornamento: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </body>
        </html>
        """
        
        with open('dashboard.html', 'w') as f:
            f.write(html)
    
    def run(self):
        """Loop principale"""
        print(f"\n{self.config.EMOJI['rocket']} Bot avviato!")
        print(f"Controllo prezzi ogni {self.config.CHECK_INTERVAL} secondi")
        print(f"Monitoraggio: {', '.join(self.config.PAIRS)}")
        print(f"\nPremi Ctrl+C per fermare\n")
        
        cycle = 0
        last_stats_time = datetime.now()
        
        while True:
            try:
                cycle += 1
                
                # Progress indicator
                spinner = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è']
                print(f"\r{spinner[cycle % len(spinner)]} Ciclo #{cycle} - Cerco opportunit√†...", end='', flush=True)
                
                # Ottieni prezzi
                prices = self.get_prices()
                
                # Trova opportunit√†
                opportunities = self.find_arbitrage_opportunities(prices)
                
                # Mostra nuove opportunit√†
                if opportunities:
                    print("\r" + " " * 50, end='')  # Pulisci linea
                    for opp in opportunities[:3]:  # Mostra top 3
                        self.display_opportunity(opp)
                        self.opportunities_count += 1
                        self.total_profit_found += opp['profit_pct']
                        
                        # Aggiorna migliore
                        if not self.best_opportunity or opp['profit_pct'] > self.best_opportunity['profit_pct']:
                            self.best_opportunity = opp
                
                # Salva dati
                self.save_data(opportunities, prices)
                
                # Aggiorna dashboard
                self.create_mini_dashboard()
                
                # Mostra statistiche ogni 5 minuti
                if (datetime.now() - last_stats_time).seconds > 300:
                    print("\r" + " " * 50, end='')  # Pulisci linea
                    self.show_statistics()
                    last_stats_time = datetime.now()
                
                # Attendi prossimo ciclo
                time.sleep(self.config.CHECK_INTERVAL)
                
            except KeyboardInterrupt:
                print(f"\n\n{self.config.EMOJI['warning']} Arresto bot...")
                self.show_statistics()
                print(f"\n{self.config.EMOJI['check']} Bot fermato. Dati salvati in data/")
                print(f"Dashboard disponibile in dashboard.html")
                break
            except Exception as e:
                print(f"\n{self.config.EMOJI['warning']} Errore: {e}")
                time.sleep(self.config.CHECK_INTERVAL)

# ==================== ENTRY POINT ====================
if __name__ == "__main__":
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë   BENVENUTO NEL MONDO DELL'ALGO TRADING   ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    Questo bot cercher√† opportunit√† di arbitraggio
    tra diversi exchange crypto in tempo reale.
    
    √à NORMALE che all'inizio veda poche opportunit√†.
    Lascialo girare per almeno 1 ora per risultati
    significativi.
    
    Buona fortuna! üöÄ
    """)
    
    input("Premi ENTER per iniziare...")
    
    bot = SimpleObservatoryBot()
    bot.run()